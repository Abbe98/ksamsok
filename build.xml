<?xml version="1.0" encoding="UTF-8"?>
<project name="ksamsok" basedir="." default="RAA-UTV-RPM">

    <description>
        Ant-byggfil, ksamsok
    </description>

    <property name="project.build.dir" value="${basedir}/build"/>
	<property name="classes.dir" value="${basedir}/classes" />

    <target name="clean" description="Tar bort build-katalogen.">
        <mkdir dir="${project.build.dir}"/>
        <delete includeemptydirs="true" >
            <fileset dir="${project.build.dir}">
                <patternset>
                    <!--<exclude name="*/*.rpm"/>-->
                </patternset>
            </fileset>
        </delete>
    </target>
	
    <target name="init">
        <tstamp/>
        <property environment="env"/>

        <property file="local.properties"/>

        <property name="project.name" value="ksamsok"/>
        <property name="project.version" value="${DSTAMP}"/>
        <property name="project.src.dir" value="${basedir}/src"/>
        <property name="project.src.lib.dir" value="${basedir}/lib"/>
    	<property name="jar.name" value="${project.name}-${project.version}.jar"/>
        <property name="war.name" value="${project.name}-${project.version}.war"/>
        <property name="short.war.name" value="${project.name}.war"/>

        <!-- för rpm, öka vid ny version... -->
        <property name="version.major.minor"    value="0.2" />
        <property name="version.release"        value="1" />

        <property name="javac.debug" value="true"/>
        <property name="javac.optimize" value="true"/>

        <path id="project.classpath">
            <fileset dir="${project.src.lib.dir}">
                <include name="*.jar"/>
            </fileset>
        </path>

        <path id="project.test.classpath">
            <fileset dir="${basedir}/test/lib">
                <include name="*.jar"/>
            </fileset>
            <path refid="project.classpath" />
        </path>

        <fileset id="deploy.jars" dir="${project.src.lib.dir}">
            <patternset id="deploy.jars.pattern" />
        </fileset>

        <!-- Konfigurationsfiler -->
        <patternset id="conf.files">
            <include name="**/*.properties"/>
            <include name="**/*.xml"/>
            <include name="**/*.sh"/>
            <include name="**/*.dtd"/>
            <!--  snowball/lucene, stopp-ordsfiler -->
            <include name="**/*_stop.txt"/>
            <!-- uri till namnuppslagning -->
            <include name="**/*.rdf"/>
            <include name="**/*.xsd"/>
        </patternset>

        <mkdir dir="${project.build.dir}"/>
        <mkdir dir="${project.build.dir}/lib"/>
        <mkdir dir="${project.build.dir}/war"/>
    </target>

    <target name="compile" depends="init"
        description="Kompilerar java-klasser.">
        <javac srcdir="${project.src.dir}"
            destdir="${project.build.dir}"
            classpathref="project.classpath"
            debug="${javac.debug}" 
            optimize="${javac.optimize}"
            encoding="UTF-8"
            includeantruntime="false">
            <patternset>
                <include name="**/*.java"/>
                <exclude name="**/*Test.java"/>
                <exclude name="**/CheckCountryCodes.java"/>
                <exclude name="**/UpdateParishRdfWithWikipediaLinks.java"/>
            </patternset>

        </javac>
    </target>

    <!-- Bygger en JAR -->
    <target name="jar" depends="init,compile,conf-copy"
        description="Skapar en JAR.">
        <jar jarfile="${project.build.dir}/lib/${jar.name}"
            basedir="${project.build.dir}"
            update="false" duplicate="preserve" index="true">
            <patternset>
                <include name="**/*.class"/>
                <include name="**/*.xsd"/>
                <exclude name="test" />
            </patternset>
            <patternset refid="conf.files"/>
        </jar>
    </target>

    <target name="prepare-war-slave" if="ksamsok.slave">
        <echo> Patchar katalogstruktur för replikeringsslav </echo>
        <!-- bort med admin och skriv över konf-filer med "slav-versioner" -->
        <delete dir="${project.build.dir}/web/userAdmin" verbose="true" />
        <delete dir="${project.build.dir}/web/admin" verbose="true" />
        <copy overwrite="true" file="${basedir}/web/WEB-INF/slave.web.xml" tofile="${project.build.dir}/web/WEB-INF/web.xml" verbose="true"/>
        <copy overwrite="true" file="${basedir}/web/WEB-INF/slave.applicationContext.xml" tofile="${project.build.dir}/web/WEB-INF/applicationContext.xml" verbose="true"/>
    </target>

    <target name="prepare-war">
        <!-- kopiera men ta inte med slavkonf, den kommer ev med i senare steg -->
        <copy todir="${project.build.dir}/web">
            <fileset dir="${basedir}/web">
                <exclude name="WEB-INF/slave.web.xml" />
                <exclude name="WEB-INF/slave.applicationContext.xml" />
            </fileset>
        </copy>
    </target>

    <!-- Bygger en WAR -->
    <target name="war" depends="jar,prepare-war,prepare-war-slave" description="Skapar en WAR för deployment.">
        <war excludes="**/web.xml" basedir="${project.build.dir}/web" destfile="${project.build.dir}/war/${war.name}" webxml="${project.build.dir}/web/WEB-INF/web.xml">
            <lib dir="${project.build.dir}/lib">
                <include name="${jar.name}" />
            </lib>
            <lib dir="${project.src.lib.dir}">
                <include name="*.jar" />
                <exclude name="servlet-*.jar" />
                <!-- oracle koppling används inte längre-->
                <exclude name="ora10-*.jar" />
                <exclude name="oracle-*.jar" />
            </lib>
            <zipfileset dir="${project.src.conf.context.dir}" includes="**/context.xml" prefix="META-INF"/>
        </war>
        <copy file="${project.build.dir}/war/${war.name}" tofile="${project.build.dir}/war/${short.war.name}"/>
    </target>

    <target name="conf-copy" depends="init">
        <copy todir="${project.build.dir}">
            <fileset dir="${project.src.dir}">
                <patternset refid="conf.files"/>
            </fileset>
        </copy>
    </target>

    <target name="build" depends="init" description="Bygger.">
        <antcall target="compile"/>
        <antcall target="conf-copy"/>
    </target>

    <target name="javadoc" depends="init"
        description="Genererar javadoc.">
        <javadoc sourcepath="${project.src.dir}"
            classpathref="project.classpath"
            destdir="${project.build.dir}/javadoc"
            packagenames="se.raa.ksamsok.*"
            defaultexcludes="yes"
            windowtitle="K-samsök"
            access="package"
            use="true"
            >
        </javadoc>
    </target>

    <target name="slave">
        <!-- flagga att vi bygger en replikeringslav med bara api-funktioner, triggar specialhantering -->
        <property name="ksamsok.slave" value="true" />
    </target>
    
    <target name="updateSpecToSlave" if="ksamsok.slave">
        <copy todir="${project.build.dir}/rpm/SPECS" file="rpm/ksamsok.spec" overwrite="true">
            <filterset>
                <filter token="RPM_SUFFIX" value="slave"/>
                <filter token="RPM_VERSION_MAJOR_MINOR" value="${version.major.minor}"/>
                <filter token="RPM_VERSION_RELEASE" value="${version.release}"/>
            </filterset>
        </copy>
    </target>
    
    <target name="base-RAA-RPM" depends="war">

        <!-- skapa RPM-struktur -->
        <mkdir dir="${project.build.dir}/rpm/RPMS" />
        <mkdir dir="${project.build.dir}/rpm/SPECS" />
        <mkdir dir="${project.build.dir}/rpm/SOURCES" />
        <mkdir dir="${project.build.dir}/rpm/BUILD" />
        <mkdir dir="${project.build.dir}/rpm/SRPMS" />
        <mkdir dir="${project.build.dir}/rpm/INSTALL" />
        <copy todir="${project.build.dir}/rpm/SPECS" file="rpm/ksamsok.spec">
            <filterset>
                <filter token="RPM_SUFFIX" value="master"/>
                <filter token="RPM_VERSION_MAJOR_MINOR" value="${version.major.minor}"/>
                <filter token="RPM_VERSION_RELEASE" value="${version.release}"/>
            </filterset>
        </copy>
        
        <antcall target="updateSpecToSlave"/>

        <!-- kopiera in så som det ska se ut sen efter installation -->
        <copy todir="${project.build.dir}/rpm/SOURCES/">
            <fileset dir="${project.build.dir}/war">
                <include name="ksamsok.war"/>
            </fileset>
        </copy>
        <copy todir="${project.build.dir}/rpm/SOURCES/">
            <fileset dir="conf">
                <include name="tomcat-users.xml"/>
                <include name="setenv.sh"/>
                <include name="ksamsok.javaopts"/>
            </fileset>
        </copy>
        
        <!-- Skapa själva rpm filen -->
                    <echo message="${project.build.dir}"/>
                    <rpm
                            specFile="ksamsok.spec"
                            topDir="${project.build.dir}/rpm"
                            cleanBuildDir="true"
                            failOnError="true"/>
                    
                    
                    <!-- Lägg upp rpm-filen i ${project.build.rpm.dir} -->
                    <copy todir="${project.build.dir}/rpm">
                        <fileset dir="${project.build.dir}/rpm/RPMS/x86_64">
                            <include name="*.rpm"/>
                        </fileset>
                    </copy>
                    
    </target>

    <!-- En slav och en master rpm byggs alltid -->
    
    <target name="RAA-RPM" depends="produktion,base-RAA-RPM" description="Skapa rpm för raä:s driftmiljö">
        <!--Bygg en slav också -->
        <antcall target="RAA-RPM-SLAVE"/>
    </target>
    
    <target name="RAA-RPM-SLAVE" depends="produktion,slave,base-RAA-RPM" description="Skapa rpm för raä:s driftmiljö">
    </target>
        
    <target name="RAA-UTV-RPM" depends="utveckling,base-RAA-RPM" description="Skapa rpm för raä:s utvecklings driftmiljö (slav)">
        <!--Bygg en slav också -->
        <antcall target="RAA-UTV-RPM-SLAVE"/>
    </target>
    
    <target name="RAA-UTV-RPM-SLAVE" depends="utveckling,slave,base-RAA-RPM" description="Skapa rpm för raä:s utvecklings driftmiljö (slav)">
    </target>


    <target name="test" depends="jar" description="Kör alla testfall och genererar en htmlrapport">
        <mkdir dir="${project.build.dir}/test"/>
        <mkdir dir="${project.build.dir}/test/reports"/>
        <javac srcdir="${basedir}/test/src"
            destdir="${project.build.dir}/test"
            debug="${javac.debug}" 
            optimize="${javac.optimize}"
            encoding="UTF-8"
            includeantruntime="false">
            <classpath>
                <path refid="project.test.classpath" />
                <pathelement location="${project.build.dir}" />
            </classpath>
            <patternset>
                <include name="**/*.java"/>
            </patternset>
        </javac>

        <junit printsummary="no" fork="yes">
        	<jvmarg value="-Dfile.encoding=UTF-8"/>
            <classpath>
                <path refid="project.test.classpath" />
                <pathelement location="${project.build.dir}/test" />
                <pathelement location="${project.build.dir}/lib/${jar.name}" />
            </classpath>
            <formatter type="xml"/>
            <batchtest todir="build/test/reports">
                <fileset dir="${basedir}/test/src">
                    <include name="**/*.java" />
                </fileset>
            </batchtest>
        </junit>
        <junitreport todir="build/test/reports" >
          <fileset dir="build/test/reports">
            <include name="TEST-*.xml"/>
          </fileset>
          <report format="frames" todir="build/test/htmlreport" />
        </junitreport>
    </target>
    
    <target name="utveckling">
        <property name="project.src.conf.context.dir" value="${basedir}/conf/test"/>
    	<copy file="${basedir}/conf/test/environment.properties.dev"  
    	    						toFile="web/WEB-INF/classes/environment.properties" 
    	    						failonerror="true" 
    	    						overwrite="true" 
    	    						verbose="true" />
    </target>
    
    <target name="produktion">
        <property name="project.src.conf.context.dir" value="${basedir}/conf/prod"/>
    	<copy file="${basedir}/conf/prod/environment.properties.prod"  
    						toFile="web/WEB-INF/classes/environment.properties" 
    						failonerror="true" 
    						overwrite="true" 
    						verbose="true" />
    </target>
	
	<target name="generateSourcePackage" depends="clean, init" description="This target generates a source code package for public publishing">
		<mkdir dir="${project.build.dir}/SOCH_Src_Code/src" />
		<mkdir dir="${project.build.dir}/SOCH_Src_Code/test" />
		<mkdir dir="${project.build.dir}/SOCH_Src_Code/sql" />
		<mkdir dir="${project.build.dir}/SOCH_Src_Code/web" />
		<!--Source dir -->
		<copy todir="${project.build.dir}/SOCH_Src_Code/src">
			<fileset dir="${project.src.dir}">
				<include name="se/raa/**/*.java" />
				<include name="se/raa/**/*.sql" />
				<include name="se/raa/**/*.xsd" />
				<include name="se/raa/**/*.rdf" />
				<include name="se/raa/**/*.xml" />
				<include name="*.properties" />
				<exclude name="se/raa/**/util/*" />
			</fileset>
		</copy>
		<!--Test dir -->
		<copy todir="${project.build.dir}/SOCH_Src_Code/test">
			<fileset dir="${basedir}/test">
				<include name="**/*.java" />
				<include name="**/*.xml" />
				<include name="**/*.rdf" />
				<!-- This file contains the connection to the test database --> 
				<exclude name="**/testContext.xml" />
			</fileset>
		</copy>
		<!-- SQL dir -->
		<copy todir="${project.build.dir}/SOCH_Src_Code/sql">
			<fileset dir="${basedir}/sql">
				<include name="**/*sql" />
			</fileset>
		</copy>
		<!-- WEB dir -->
		<copy todir="${project.build.dir}/SOCH_Src_Code/web">
			<fileset dir="${basedir}/web">
				<include name="**/*.jsp" />
				<include name="**/*.css" />
				<include name="**/*.html" />
				<include name="**/*.js" />
				<include name="**/*.xml" />
				<include name="**/*.rdf" />
				<include name="**/*.owl" />
				<include name="**/*.xsl" />
				<include name="**/*.properties" />
				<exclude name="**/google*" />
				<exclude name="**/robots.txt" />
			</fileset>
		</copy>
		<tar destfile="${project.build.dir}/SOCH_Src_Code.tgz" basedir="${project.build.dir}/SOCH_Src_Code" compression="gzip" />
	</target>
</project>
